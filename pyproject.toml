[tool.poetry]
name = "portfolio"
version = "1.8.2"
description = ""
authors = ["Ramakant <jogi.ramakant94@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
Django = "^5.0.4"
pillow = "^10.3.0"

django-debug-toolbar = "*"
django-extensions = "^3.2.3"
celery = "^5.4.0"
django-environ = "^0.11.2"
whitenoise = "^6.6.0"
google-api-python-client = "^2.128.0"
google-auth-httplib2 = "^0.2.0"
google-auth-oauthlib = "^1.2.0"
pyjwt = "^2.8.0"
cryptography = "^42.0.7"
bumpver = "^2023.1129"
[tool.poetry]
name = "upliftratings"
version = "1.8.2"
description = ""
authors = ["Ramakant <jogi.ramakant94@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
Django = "^5.0.4"
pillow = "^10.3.0"

django-debug-toolbar = "*"
django-extensions = "^3.2.3"
celery = "^5.4.0"
django-environ = "^0.11.2"
whitenoise = "^6.6.0"
google-api-python-client = "^2.128.0"
google-auth-httplib2 = "^0.2.0"
google-auth-oauthlib = "^1.2.0"
pyjwt = "^2.8.0"
cryptography = "^42.0.7"

[tool.poetry.group.dev.dependencies]
black = "*"
bumpver = "*"
flake8 = "*"
coverage = "*"
django-coverage-plugin = "*"
appmap = {version = "^2.0.7", allow-prereleases = true}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
# See: https://github.com/microsoft/pyright/blob/main/docs/configuration.md
exclude=["**/__pycache__"]
include=["app", "config", "libs"]
pythonVersion="3.11.3"
reportMissingImports = true
reportMissingTypeStubs = false
reportLibraryCodeForTypes = true
typeChecking = "basic"
venvPath = "./.venv"

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
python_files = [
    "tests.py",
    "test_*.py",
]

[tool.black]
line-length = 120
target_version = ['py38']

[tool.bumpver]
current_version = "2.2.0"
version_pattern = "MAJOR.MINOR.PATCH[PYTAGNUM]"
commit_message = "Bump version {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'current_version = "{version}"',
    'version = "{version}"',
]
"app/__init__.py" = [
    "{version}",
    "{pep440_version}",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*.py",
    "staticfiles/*"
]

# ==== Coverage ====
[tool.coverage.run]
include = ["upliftratings/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2

## ==== mypy ====
#[tool.mypy]
#python_version = "3.12"
#check_untyped_defs = true
#ignore_missing_imports = true
#warn_unused_ignores = true
#warn_redundant_casts = true
#warn_unused_configs = true
#plugins = [
#    "mypy_django_plugin.main",
#    "mypy_drf_plugin.main",
#]

[tool.django-stubs]
django_settings_module = "config.settings.test"




# Same as Django: https://github.com/cookiecutter/cookiecutter-django/issues/4792.
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  'ISC',
  "ICN",
  "G",
  'INP',
  'PIE',
  "T20",
  'PYI',
  'PT',
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TCH",
  "INT",
  # "ARG", # Unused function argument
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  # "NPY",
  # "AIR",
  "PERF",
  # "FURB",
  # "LOG",
  "RUF"
]
ignore = [
  "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "SIM102", # sometimes it's better to nest
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true

[tool.poetry.group.dev.dependencies]
black = "*"
bumpver = "*"
flake8 = "*"
coverage = "*"
django-coverage-plugin = "*"
appmap = {version = "^2.0.7", allow-prereleases = true}

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pyright]
# See: https://github.com/microsoft/pyright/blob/main/docs/configuration.md
exclude=["**/__pycache__"]
include=["app", "config", "libs"]
pythonVersion="3.11.3"
reportMissingImports = true
reportMissingTypeStubs = false
reportLibraryCodeForTypes = true
typeChecking = "basic"
venvPath = "./.venv"

# ==== pytest ====
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--ds=config.settings.test --reuse-db --import-mode=importlib"
python_files = [
    "tests.py",
    "test_*.py",
]

[tool.black]
line-length = 120
target_version = ['py38']

[tool.bumpver]
current_version = "0.0.1"
version_pattern = "MAJOR.MINOR.PATCH[PYTAGNUM]"
commit_message = "Bump version {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = [
    'current_version = "{version}"',
    'version = "{version}"',
]
"app/__init__.py" = [
    "{version}",
    "{pep440_version}",
]

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "*/migrations/*.py",
    "staticfiles/*"
]

# ==== Coverage ====
[tool.coverage.run]
include = ["portfolio/**"]
omit = ["*/migrations/*", "*/tests/*"]
plugins = ["django_coverage_plugin"]

[[tool.mypy.overrides]]
# Django migrations should not produce any errors:
module = "*.migrations.*"
ignore_errors = true

# ==== djLint ====
[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/djlint/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2

## ==== mypy ====
#[tool.mypy]
#python_version = "3.12"
#check_untyped_defs = true
#ignore_missing_imports = true
#warn_unused_ignores = true
#warn_redundant_casts = true
#warn_unused_configs = true
#plugins = [
#    "mypy_django_plugin.main",
#    "mypy_drf_plugin.main",
#]

[tool.django-stubs]
django_settings_module = "config.settings.test"




# Same as Django: https://github.com/cookiecutter/cookiecutter-django/issues/4792.
line-length = 88
indent-width = 4
target-version = "py312"

[tool.ruff.lint]
select = [
  "F",
  "E",
  "W",
  "C90",
  "I",
  "N",
  "UP",
  "YTT",
  # "ANN", # flake8-annotations: we should support this in the future but 100+ errors atm
  "ASYNC",
  "S",
  "BLE",
  "FBT",
  "B",
  "A",
  "COM",
  "C4",
  "DTZ",
  "T10",
  "DJ",
  "EM",
  "EXE",
  "FA",
  'ISC',
  "ICN",
  "G",
  'INP',
  'PIE',
  "T20",
  'PYI',
  'PT',
  "Q",
  "RSE",
  "RET",
  "SLF",
  "SLOT",
  "SIM",
  "TID",
  "TCH",
  "INT",
  # "ARG", # Unused function argument
  "PTH",
  "ERA",
  "PD",
  "PGH",
  "PL",
  "TRY",
  "FLY",
  # "NPY",
  # "AIR",
  "PERF",
  # "FURB",
  # "LOG",
  "RUF"
]
ignore = [
  "S101", # Use of assert detected https://docs.astral.sh/ruff/rules/assert/
  "RUF012", # Mutable class attributes should be annotated with `typing.ClassVar`
  "SIM102", # sometimes it's better to nest
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
force-single-line = true
